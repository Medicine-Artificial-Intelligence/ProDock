name: Test & Lint

on:
  push:
    branches: ["refactor", "main", "staging"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  CONDA_ENV_NAME: prodock-env

jobs:
  build:
    name: Build, lint, test (minimal)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.11.0

      - name: Install mamba
        run: |
          conda install -n base -c conda-forge mamba -y
        shell: bash -l {0}

      - name: Create minimal conda env (openmm + pdbfixer)
        run: |
          # create env with required binary packages (minimal)
          mamba create -n "${CONDA_ENV_NAME}" -c conda-forge -y \
            python=3.11 openmm=8.3.1 pdbfixer libstdcxx-ng libgcc-ng

          # compute env prefix and publish to GITHUB_ENV so following steps can use it
          CONDA_BASE=$(conda info --base)
          ENV_PREFIX="${CONDA_BASE}/envs/${CONDA_ENV_NAME}"
          echo "ENV_PREFIX=${ENV_PREFIX}" >> $GITHUB_ENV

          # export LD_LIBRARY_PATH at runtime pointing to conda env lib dir
          # write it to GITHUB_ENV so subsequent steps can pick it up
          echo "LD_LIBRARY_PATH=${ENV_PREFIX}/lib:\$LD_LIBRARY_PATH" >> $GITHUB_ENV
        shell: bash -l {0}

      - name: Install pip requirements (allow pip-install of rdkit/openbabel/vina)
        run: |
          if [ -f requirements.txt ]; then
            # Do NOT let pip overwrite openmm/pdbfixer installed by conda.
            # We allow rdkit/openbabel/vina to be installed via pip from requirements.txt.
            grep -vE '^(openmm|pdbfixer)' requirements.txt > reqs-pip.txt || true
            conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install --upgrade pip
            conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install -r reqs-pip.txt
          fi
        shell: bash -l {0}

      - name: Install test dependencies (pytest / requirements-dev.txt)
        run: |
          # Install test dependencies inside the conda env.
          conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install -r requirements-dev.txt
          else
            # Minimal fallback: ensure pytest is present
            conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install pytest
          fi
        shell: bash -l {0}

      - name: Lint with flake8
        run: |
          conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install flake8
          conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          if [ -x ./lint.sh ]; then ./lint.sh || true; fi
        shell: bash -l {0}

      - name: Run tests (pytest)
        run: |
          conda run -n "${CONDA_ENV_NAME}" --no-capture-output python -m pip install pytest
          # Ensure runtime uses conda env lib dir and run tests inside the env.
          # ENV_PREFIX and LD_LIBRARY_PATH have been written to $GITHUB_ENV in an earlier step,
          # so they are available as environment variables here.
          conda run -n "${CONDA_ENV_NAME}" --no-capture-output bash -lc 'export LD_LIBRARY_PATH="${ENV_PREFIX}/lib:${LD_LIBRARY_PATH:-}"; if [ -x ./pytest.sh ]; then ./pytest.sh; else python -m pytest -q; fi'
        shell: bash -l {0}
